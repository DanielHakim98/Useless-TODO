openapi: "3.0.0"
info:
  version: 1.0.0
  title: Useless-TODO
  description: It's just simple TODO, but with a little twist
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: http://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://useless-todo.swagger.io/v2
paths:
  /todos:
    get:
      description: |
        Returns all todos from the system that the user has access to
      operationId: findTodos
      parameters:
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: todos response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Todo"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new todo in the in todo list. Duplicates are allowed
      operationId: addTodo
      requestBody:
        description: New todo to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTodo"
      responses:
        "200":
          description: todo response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /todos/{id}:
    get:
      description: Returns a single todo based on a single ID
      operationId: find todo by id
      parameters:
        - name: id
          in: path
          description: ID of todo to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: todo response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: deletes a single todo based on the ID supplied
      operationId: deleteTodo
      parameters:
        - name: id
          in: path
          description: ID of todo to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: todo deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Todo:
      allOf:
        - $ref: "#/components/schemas/NewTodo"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64

    NewTodo:
      type: object
      required:
        - title
        - content
        - date
      properties:
        title:
          type: string
        content:
          type: string
        date:
          type: string

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
